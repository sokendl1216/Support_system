{
  "javascript_script": {
    "name": "JavaScript スクリプト",
    "description": "汎用JavaScriptスクリプトテンプレート",
    "template": "/**\n * {description}\n */\n\n// 設定\nconst CONFIG = {\n    debug: process.env.NODE_ENV !== 'production',\n    version: '1.0.0'\n};\n\n/**\n * メイン処理クラス\n */\nclass MainProcessor {\n    constructor() {\n        this.initialized = false;\n    }\n\n    /**\n     * 初期化\n     */\n    async initialize() {\n        try {\n            console.log('処理を開始します...');\n            this.initialized = true;\n            return true;\n        } catch (error) {\n            console.error('初期化エラー:', error);\n            return false;\n        }\n    }\n\n    /**\n     * メイン処理実行\n     */\n    async run() {\n        if (!this.initialized) {\n            await this.initialize();\n        }\n\n        try {\n            // ここにメインロジックを実装\n            console.log('Hello, World!');\n            \n        } catch (error) {\n            console.error('実行エラー:', error);\n            throw error;\n        }\n    }\n}\n\n/**\n * エントリーポイント\n */\nasync function main() {\n    try {\n        const processor = new MainProcessor();\n        await processor.run();\n        console.log('処理が完了しました');\n    } catch (error) {\n        console.error('エラーが発生しました:', error);\n        process.exit(1);\n    }\n}\n\n// スクリプトとして実行された場合\nif (require.main === module) {\n    main();\n}\n\nmodule.exports = { MainProcessor };\n",
    "variables": ["description"],
    "files": ["index.js", "package.json"]
  },
  "javascript_express_app": {
    "name": "Express.js Webアプリケーション",
    "description": "Express.js を使用したWebアプリケーション",
    "template": "/**\n * {description}\n * Express.js を使用したWebアプリケーション\n */\n\nconst express = require('express');\nconst path = require('path');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// ミドルウェア設定\napp.use(helmet());\napp.use(cors());\napp.use(morgan('combined'));\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true }));\napp.use(express.static(path.join(__dirname, 'public')));\n\n// ルート設定\napp.get('/', (req, res) => {\n    res.json({\n        message: 'Welcome to the API!',\n        version: '1.0.0',\n        timestamp: new Date().toISOString()\n    });\n});\n\n// API ルート\napp.get('/api/health', (req, res) => {\n    res.json({\n        status: 'OK',\n        uptime: process.uptime(),\n        timestamp: new Date().toISOString()\n    });\n});\n\napp.get('/api/data', (req, res) => {\n    try {\n        // ここにデータ取得ロジックを実装\n        const data = {\n            message: 'Hello from API!',\n            data: []\n        };\n        res.json(data);\n    } catch (error) {\n        console.error('API エラー:', error);\n        res.status(500).json({ error: 'Internal Server Error' });\n    }\n});\n\napp.post('/api/data', (req, res) => {\n    try {\n        const { body } = req;\n        // ここにデータ処理ロジックを実装\n        \n        res.json({\n            message: 'Data received successfully',\n            receivedData: body\n        });\n    } catch (error) {\n        console.error('API エラー:', error);\n        res.status(500).json({ error: 'Internal Server Error' });\n    }\n});\n\n// エラーハンドリング\napp.use((req, res) => {\n    res.status(404).json({ error: 'Not Found' });\n});\n\napp.use((error, req, res, next) => {\n    console.error('Unhandled error:', error);\n    res.status(500).json({ error: 'Internal Server Error' });\n});\n\n// サーバー起動\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n    console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);\n});\n\nmodule.exports = app;\n",
    "variables": ["description"],
    "files": ["app.js", "package.json", "public/index.html"],
    "dependencies": ["express", "cors", "helmet", "morgan"]
  },
  "javascript_react_app": {
    "name": "React アプリケーション",
    "description": "React を使用したフロントエンドアプリケーション",
    "template": "/**\n * {description}\n * React アプリケーションのメインコンポーネント\n */\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\n/**\n * メインアプリケーションコンポーネント\n */\nfunction App() {\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    /**\n     * データ取得\n     */\n    const fetchData = async () => {\n        setLoading(true);\n        setError(null);\n        \n        try {\n            // ここにデータ取得ロジックを実装\n            const response = await fetch('/api/data');\n            if (!response.ok) {\n                throw new Error('データの取得に失敗しました');\n            }\n            const result = await response.json();\n            setData(result.data || []);\n        } catch (err) {\n            setError(err.message);\n            console.error('データ取得エラー:', err);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    /**\n     * 初期化\n     */\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>React Application</h1>\n                <p>{'{description}'}</p>\n            </header>\n            \n            <main className=\"App-main\">\n                <section className=\"data-section\">\n                    <h2>Data</h2>\n                    \n                    {loading && <p>Loading...</p>}\n                    {error && <p className=\"error\">Error: {error}</p>}\n                    \n                    {!loading && !error && (\n                        <div>\n                            {data.length > 0 ? (\n                                <ul>\n                                    {data.map((item, index) => (\n                                        <li key={index}>{JSON.stringify(item)}</li>\n                                    ))}\n                                </ul>\n                            ) : (\n                                <p>No data available</p>\n                            )}\n                        </div>\n                    )}\n                    \n                    <button onClick={fetchData} disabled={loading}>\n                        Refresh Data\n                    </button>\n                </section>\n            </main>\n            \n            <footer className=\"App-footer\">\n                <p>© 2024 React Application</p>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n",
    "variables": ["description"],
    "files": ["src/App.js", "src/App.css", "package.json", "public/index.html"],
    "dependencies": ["react", "react-dom", "react-scripts"]
  }
}
